{"version":3,"file":"index.js","sources":["../app-config.js","../server/auth/session-store.js","../server/lib/string-timer.js","../server/lib/db.js","../server/lib/query-builder.js","../server/lib/console-functions.js","../server/auth/users.js","../server/auth/index.js","../server/logger.js","../server/api/api.js","../server/index.js"],"sourcesContent":["export default {\r\n  theme: 'light',\r\n  title: 'Quantum Impact',\r\n  users: {\r\n    database: 'qdca',\r\n    table: '_users'\r\n  },\r\n  ports: {\r\n    http: 3008,\r\n    io: 8090\r\n  }\r\n}\r\n","import debug from 'debug'\r\nimport crypto from 'crypto'\r\nimport Blowfish from 'xs-blowfish'\r\nimport pkg from '../../package.json'\r\n\r\nconst message = debug('sessions')\r\nconst DEFAULT_EXPIRATION = 3600000\r\nconst HASH_SECRET = 'lazard-demo v' + pkg.version\r\nconst hmac = crypto.createHmac('sha256', HASH_SECRET)\r\nconst bf = new Blowfish(HASH_SECRET)\r\n\r\n// extend Date with .add(ms) functionality\r\nDate.prototype.add = function(ms) {\r\n  this.setTime(this.getTime() + ms)\r\n  return this\r\n}\r\n\r\nDate.prototype.toUTC = function() {\r\n  return Date.UTC(\r\n    this.getUTCFullYear(),\r\n    this.getUTCMonth(),\r\n    this.getUTCDate(),\r\n    this.getUTCHours(),\r\n    this.getUTCMinutes(),\r\n    this.getUTCSeconds(),\r\n    this.getUTCMilliseconds(),\r\n  )\r\n}\r\n\r\n// global sessions object\r\nlet sessions = {}\r\n\r\nfunction timeoutSession(sessionid, duration) {\r\n  return setTimeout(() => {\r\n    let session = sessions[sessionid]\r\n\r\n    if (session) {\r\n      message(`user session for ${session.user.name} expired`)\r\n      delete sessions[sessionid]\r\n    }\r\n  }, duration)\r\n}\r\n\r\nfunction clearSessions(user) {\r\n  Object.keys(sessions).forEach(sessionid => {\r\n    let session = sessions[sessionid]\r\n    if (session.user.id === user.id) {\r\n      clearTimeout(session.timeout)\r\n      delete sessions[sessionid]\r\n    }\r\n  })\r\n}\r\n\r\nfunction createSession(user, token) {\r\n  let session = {\r\n    user,\r\n    expires: (new Date()).add(DEFAULT_EXPIRATION),\r\n  }\r\n\r\n  token.expires = (new Date()).add(DEFAULT_EXPIRATION)\r\n  user.token = bf.encrypt(JSON.stringify(token))\r\n\r\n  let sessionid = user.sessionid = crypto\r\n                                    .createHmac('sha256', HASH_SECRET)\r\n                                    .update(JSON.stringify(user))\r\n                                    .digest('hex')\r\n\r\n  session.timeout = timeoutSession(sessionid, DEFAULT_EXPIRATION)\r\n\r\n  // clear existing sessions for user\r\n  clearSessions(user)\r\n\r\n  // store new session\r\n  sessions[sessionid] = session\r\n\r\n  message(`creating user session for ${user.name} with sessionid ${sessionid}`)\r\n\r\n  return user\r\n}\r\n\r\nfunction listSessions() {\r\n  return Object.keys(sessions).map(sessionid => sessions[sessionid].user)\r\n}\r\n\r\nfunction autoRefreshSession(req, res, next) {\r\n  let user = req.session && req.session.user\r\n\r\n  user && refreshSession(user.sessionid)\r\n\r\n  next()\r\n}\r\n\r\nfunction refreshSession(sessionid) {\r\n  let storedSession = sessions[sessionid]\r\n\r\n  if (storedSession) {\r\n    message(`refreshing user session for ${storedSession.user.name}...`)\r\n    clearTimeout(storedSession.timeout)\r\n    Object.assign(storedSession, {\r\n      expires: (new Date()).add(DEFAULT_EXPIRATION),\r\n      timeout: timeoutSession(sessionid, DEFAULT_EXPIRATION)\r\n    })\r\n  }\r\n}\r\n\r\nfunction resumeSession(sessionid) {\r\n  let storedSession = sessions[sessionid]\r\n\r\n  if (storedSession) {\r\n    let user = storedSession.user\r\n\r\n    message(`resuming user session for ${user.name}`)\r\n    refreshSession(sessionid)\r\n\r\n    return user\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nexport { autoRefreshSession, createSession, refreshSession, resumeSession, listSessions }\r\n","export default class StringTimer {\r\n  constructor(init) {\r\n    Object.assign(this, {\r\n      log: [new Date],        // running log of timestamps\r\n      stamps: {},             // lookup table of manually-named timestamps\r\n      at: null,               // internal position for comparison\r\n      formatter: this.format, // defaults to internal formatter, but may override with any external library\r\n      logLimit: 1000          // trim log to this many entries\r\n    }, init)\r\n\r\n  }\r\n\r\n  format(duration) {\r\n    let unit = 'ms';\r\n\r\n    if (duration > 1000) {\r\n      unit = 'sec';\r\n      duration = duration / 1000;\r\n\r\n      if (duration > 60) {\r\n        unit = 'min';\r\n        duration = duration / 60;\r\n\r\n        if (duration > 60) {\r\n          unit = 'hour';\r\n          duration = duration / 60;\r\n        }\r\n      }\r\n    }\r\n\r\n    return `${duration}${unit}`;\r\n  }\r\n\r\n  elapsed(key, distance = 1) {\r\n    return new Date - (this.at || [...this.log].slice(-distance)[0]);\r\n  }\r\n\r\n  from(key) {\r\n    this.at = this.stamps[key];\r\n    return this;\r\n  }\r\n\r\n  set(key, date = new Date) {\r\n    if (key) {\r\n      this.stamps[key] = date;\r\n    }\r\n    [this.at] = this.log.slice(-1); // sets at cursor to one position back\r\n    this.log = [...this.log, date].slice(-this.logLimit); // append new date to log and take last [logLimit]\r\n    this.total = this.formatter(new Date - this.log[0]);\r\n    return this;\r\n  }\r\n\r\n  toString() {\r\n    let elapsed = this.elapsed();\r\n    this.set();\r\n    [this.at] = this.log.slice(-1); // resets at cursor to current last entry\r\n\r\n    return this.formatter(elapsed);\r\n  }\r\n}\r\n","import mysql from 'mysql'\r\nimport comysql from 'co-mysql'\r\nimport APP_ROOT from 'app-root-path'\r\nimport debug from 'debug'\r\nconst credentials = require(APP_ROOT + '/credentials.json')\r\nconst databases = require(APP_ROOT + '/databases.json')\r\nconst message = debug('database')\r\n\r\nexport default {\r\n  get(alias) {\r\n    message('get db with alias', alias)\r\n    if (!alias) {\r\n      // console.log(databases)\r\n      var alias = Object.keys(databases)[0]\r\n      message('alias not defined, using default', alias)\r\n    }\r\n    let db = databases[alias]\r\n    let dbConfig = Object.assign({\r\n      connectionLimit: 10,\r\n      host: db.host,\r\n      database: db.database,\r\n      multipleStatements: true,\r\n      debug: false\r\n    }, credentials[alias])\r\n    message('creating connection', dbConfig)\r\n    let pool = mysql.createPool(dbConfig)\r\n    let connection = comysql(pool)\r\n\r\n    return connection\r\n  }\r\n}\r\n","import StringTimer from './string-timer'\r\nimport debug from 'debug'\r\nimport db from './db'\r\n\r\nconst message = debug('query-builder')\r\n\r\nexport default class QueryBuilder {\r\n  constructor(options) {\r\n    this._query = {\r\n      select: [],\r\n      sql: null,\r\n      from: null,\r\n      where: [],\r\n      joins: [],\r\n      groupBy: [],\r\n      orderBy: [],\r\n      limit: 100000\r\n    }\r\n\r\n    this.options = options || {}\r\n    this.postFilters = []\r\n    this.transforms = []\r\n    this.setDB()\r\n  }\r\n\r\n  addPostFilter(filter) {\r\n    this.postFilters.push(filter)\r\n\r\n    return this\r\n  }\r\n\r\n  addTransform(transform) {\r\n    this.transforms.push(transform)\r\n\r\n    return this\r\n  }\r\n\r\n  // shorthand syntax and === where\r\n  and(condition){\r\n    return this.where(condition)\r\n  }\r\n\r\n  // shorthand syntax andWhere === where\r\n  andWhere(condition) {\r\n   return this.where(condition)\r\n  }\r\n\r\n  query(sql, callback) {\r\n    return this.fromSQL(sql).execute(callback)\r\n  }\r\n\r\n  execute(callback) {\r\n    let {sql, from} = this._query\r\n\r\n    try {\r\n      if (!(sql || from)) {\r\n        return callback('No API target defined')\r\n      }\r\n      let time = new StringTimer()\r\n\r\n      return this.db.query(this.toSQL(), (err, results) => {\r\n        message(`query execution: ${time}`, results)\r\n        let data = results\r\n        if (results && results.pop) {\r\n          data = results.pop()\r\n        }\r\n\r\n        if (!err && results) {\r\n          if (this.postFilters.length) {\r\n            this.postFilters.forEach(filter => data = filter(data))\r\n            message(`filter processing: ${time}`)\r\n          }\r\n\r\n          if (this.transforms.length) {\r\n            this.transforms.forEach(transform => data = transform(data))\r\n            message(`transform processing: ${time}`)\r\n          }\r\n        }\r\n\r\n        message(`total execution time: ${time.total}`)\r\n        return callback(err, data)\r\n      })\r\n    } catch(err) {\r\n      message('ERROR executing sql:', this.toSQL(), err)\r\n    }\r\n  }\r\n\r\n  from(table, alias) {\r\n    this._query.from = table + (alias ? ` as ${alias}` : '')\r\n\r\n    return this\r\n  }\r\n\r\n  fromSQL(sql) {\r\n    this._query.sql = sql\r\n\r\n    return this\r\n  }\r\n\r\n  getJoins() {\r\n    let joinStr = ''\r\n    this._query.joins.forEach(join => {\r\n      let {table, alias} = join\r\n      joinStr += ` INNER JOIN ${table}` + (alias ? ` AS ${alias}` : '')\r\n    })\r\n\r\n    return joinStr\r\n  }\r\n\r\n  getOptions() {\r\n    return this.options\r\n  }\r\n\r\n  groupBy(groupBy = []) {\r\n    (Array.isArray(groupBy) && groupBy || [groupBy]).forEach(s => {\r\n      if (s) {\r\n        this._query.groupBy.push(s)\r\n      }\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  join(table, alias) {\r\n    this._query.joins.push({\r\n      table, alias\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  limit(num) {\r\n    this._query.limit = num\r\n\r\n    return this\r\n  }\r\n\r\n  orderBy(orderBy = []) {\r\n    (Array.isArray(orderBy) && orderBy || [orderBy]).forEach(s => {\r\n      if (s) {\r\n        this._query.orderBy.push(s)\r\n      }\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  select(select = []) {\r\n    (Array.isArray(select) && select || [select]).forEach(s => {\r\n      if (s) {\r\n        this._query.select.push(s)\r\n      }\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  setDB(alias) {\r\n    this.db = db.get(alias)\r\n\r\n    return this\r\n  }\r\n\r\n  setOptions(options) {\r\n    message('extending query options', this.options, options)\r\n    Object.assign(this.options, options || {})\r\n\r\n    message('extended query options', this.options)\r\n    return this\r\n  }\r\n\r\n  setPortfolio(id) {\r\n    this.portfolioID = parseInt(id)\r\n    if (id) {\r\n      this.where(`pUID = ${id}`)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  setWell(id) {\r\n    if (id && parseInt(id)) {\r\n      this.where(`wUID = ${id}`)\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  toSQL() {\r\n    let {select, where, from, sql, limit, groupBy, orderBy} = this._query\r\n    let joins = this.getJoins()\r\n\r\n    select = select.length ? select.join(', ') : '*'\r\n    groupBy = groupBy.length ? ('GROUP BY ' + groupBy.join(', ')) : ''\r\n    orderBy = orderBy.length ? ('ORDER BY ' + orderBy.join(', ')) : ''\r\n    where = where.length ? ('WHERE ' + where.join(' AND ')) : ''\r\n    limit = limit ? `LIMIT ${limit}` : ''\r\n\r\n    sql = sql || `SELECT ${select} FROM ${from} ${joins} ${where} ${groupBy} ${orderBy} ${limit}`\r\n\r\n    // sql = sql.replace(/^SELECT/,'SELECT SQL_NO_CACHE')\r\n\r\n    message('toSQL() =>', sql)\r\n\r\n    return sql\r\n  }\r\n\r\n  where(condition) {\r\n    let { where } = this._query\r\n    where.push(condition)\r\n\r\n    return this\r\n  }\r\n}\r\n","import colors from 'colors'\r\n\r\nexport default (target, writeFunction) => {\r\n  target.write = process.stdout.write.bind(process.stdout)\r\n\r\n  target.tally = (value, label) => {\r\n    writeFunction('\\x1b[0;32m' + value + '\\x1b[0;37m ' + label)\r\n  }\r\n\r\n  target.header = (label) => {\r\n    process.stdout.write('\\n' + label.bold.white + '\\n\\n')\r\n  }\r\n\r\n  target.task = (label) => {\r\n    process.stdout.write((label + '... '))\r\n  }\r\n\r\n  target.complete = (message = 'OK', err) => {\r\n    process.stdout.write(message.green + '\\n')\r\n  }\r\n\r\n  target.incomplete = (message) => {\r\n    process.stdout.write('FAIL'.red + '\\n')\r\n    if (message) {\r\n      console.log(message.yellow + '\\n')\r\n    }\r\n  }\r\n\r\n  target.warn = (message) => {\r\n    console.log(message.yellow)\r\n  }\r\n\r\n  target.error = message => console.log(message.red)\r\n}\r\n","import Blowfish from 'xs-blowfish'\r\nimport QueryBuilder from '../lib/query-builder'\r\nimport SqlString from 'sqlstring'\r\nimport APP_ROOT from 'app-root-path'\r\nimport prompt from 'prompt-promise'\r\nimport appConfig from '../../app-config.js'\r\n\r\nconst debug = require('debug')('users')\r\nconst HASH_SECRET = '80% accuracy at the speed of light'\r\n\r\n// ADD CONSOLE FUNCTIONS\r\nimport consoleFunctions from '../lib/console-functions'\r\nconsoleFunctions(console, console.log)\r\n\r\n\r\n// FILTERS & SUCH\r\nconst hash = (obj) => {\r\n  let bf = new Blowfish(HASH_SECRET + obj.username)\r\n  return bf.encrypt(JSON.stringify(obj))\r\n}\r\nconst sqlize = (value) => typeof value === 'string' ? SqlString.escape(value) : value\r\nconst sqlizeDate = (date) => date.toISOString().slice(0, 19).replace('T', ' ')\r\n\r\n\r\nexport const create = (user, cb) => {\r\n  // FILL OUT HASHED COLUMNS\r\n  user.password = hash({ username: user.username, password: user.password })\r\n\r\n  let qb = new QueryBuilder\r\n  let keys = Object.keys(user)\r\n  let values = keys.map(key => sqlize(user[key])).join(', ')\r\n  let sql = `INSERT INTO ${appConfig.users.table} (${keys.join(', ')}) VALUES (${values})`\r\n\r\n  qb\r\n    .setDB(appConfig.users.database)\r\n    .query(sql, (err, data) => {\r\n      if (err) {\r\n        cb(err)\r\n      } else {\r\n        cb(null, { success: true })\r\n      }\r\n    })\r\n}\r\n\r\nexport const getUser = (user, cb) => {\r\n  let qb = new QueryBuilder\r\n  let params = ['username', 'email']\r\n  let canMatch = false\r\n\r\n  qb\r\n    .setDB(appConfig.users.database)\r\n    .from(appConfig.users.table)\r\n\r\n  debug('getting user', user)\r\n\r\n  params.forEach(param => {\r\n    let value = user[param]\r\n\r\n    if (value) {\r\n      canMatch = true\r\n      qb.where(`${param} = '${value}'`)\r\n    }\r\n  })\r\n\r\n  if (!canMatch) return cb({ message: 'user lookup requires a username or email address' })\r\n\r\n  qb.execute((err, results) => {\r\n    if (err) {\r\n      return cb(err)\r\n    }\r\n\r\n    try {\r\n      var user = Object.assign({}, results)\r\n      cb(null, user)\r\n    } catch (err) {\r\n      cb(err, null)\r\n    }\r\n  })\r\n}\r\n\r\nexport const setPassword = (user, password, cb) => {\r\n  // find user in db\r\n  // create hash from generated user & password\r\n}\r\n\r\nexport const validate = (userData, cb) => {\r\n  let { username, password, company, email } = userData\r\n\r\n  getUser(userData, (err, user) => {\r\n    if (err) {\r\n      return cb({ message: 'invalid login', details: err})\r\n    }\r\n    debug('validating', user)\r\n\r\n    let pwd = hash({ username, password })\r\n\r\n    if (user.password === pwd) {\r\n      // valid user!  update last accessed\r\n      let now = sqlizeDate(new Date)\r\n      let updateSQL = `UPDATE ${appConfig.users.table} SET dateLastAccessed = '${now}' WHERE id = '${user.id}'`\r\n      let qb = new QueryBuilder\r\n\r\n      qb.setDB(appConfig.users.database).query(updateSQL, (err) => {\r\n        if (err) {\r\n          throw new Error(err)\r\n        }\r\n\r\n        delete user.password\r\n        cb(null, user)\r\n      })\r\n    } else {\r\n      cb({ message: 'invalid login' })\r\n    }\r\n  })\r\n}\r\n\r\nexport default {\r\n  create, validate, getUser\r\n}\r\n\r\nconst commandCreateUser = async function() {\r\n  console.header('creating user...')\r\n  let username = await prompt('username: ')\r\n  let password = await prompt('password: ')\r\n  let company = await prompt('company: ')\r\n  let portfolios = await prompt('portfolios (comma-delimited): ')\r\n  create({ username, password, company, portfolios }, (err, user) => {\r\n    if (!err) {\r\n      debug('OK!')\r\n    } else {\r\n      debug('ERROR', err)\r\n    }\r\n  })\r\n}\r\n\r\nconst commandValidateUser = async function() {\r\n  debug('validating user...\\n')\r\n  let username = await prompt('username: ')\r\n  let password = await prompt('password: ')\r\n  validate({ username, password }, (err, user) => {\r\n    if (!err) {\r\n      debug('OK!')\r\n    } else {\r\n      debug('ERROR', err)\r\n    }\r\n  })\r\n}\r\n\r\nlet userCommands = process.argv.slice(2)\r\nlet availableCommands = {\r\n  create: commandCreateUser,\r\n  validate: commandValidateUser\r\n}\r\n\r\n// EXECUTE USER COMMAND\r\nif (userCommands.length) {\r\n  let command = availableCommands[userCommands[0]]\r\n  command && command()\r\n}\r\n","import express from 'express'\r\nimport serverConfig from '../../app-config'\r\nimport { createSession, resumeSession, listSessions } from './session-store'\r\nimport Blowfish from 'xs-blowfish'\r\nimport pkg from '../../package.json'\r\nimport users from './users'\r\n\r\nconst app = express()\r\n\r\n// OKTA & BLOWFISH TOKEN ENCRYPTION\r\nconst HASH_SECRET = 'lazard-demo v' + pkg.version\r\nconst bf = new Blowfish(HASH_SECRET)\r\n\r\n// API CALLS WILL BE ROUTED THROUGH THIS HOST DOMAIN\r\nconst API_HOST = serverConfig.api_host\r\n\r\n// MESSAGING CONSTANTS\r\nconst messages = {\r\n  AUTH_FAILURE:   'The username and password entered did not match our records.  Please try again.',\r\n  NOT_LOGGED_IN:  'User not logged in.',\r\n  LOGOUT_SUCCESS: 'User logged out successfully.',\r\n  REQUIRES_LOGIN: 'Accessing this data requires user login.',\r\n}\r\n\r\nconst embedBenchmark = (callback) => {\r\n  let startTime = new Date\r\n}\r\n\r\napp.isEnabled = true\r\n\r\n// EXPOSED MIDDLEWARE: API calls should require authentication\r\napp.isAuthenticated = function(req, res, next) {\r\n  if (!app.isEnabled) return next() // REMOVE*** authentication bypass\r\n  let { session } = req\r\n  let { user } = session || {}\r\n  if (!user || !user.id) {\r\n    return res.status(403).json({ status: 403, success: false, error: messages.REQUIRES_LOGIN })\r\n  }\r\n  next()\r\n}\r\n\r\n// REUSABLE AUTHENTICATION RESPONSE\r\nfunction authenticationFailure(res, detail) {\r\n  return res.status(401).json({ status: 401, success: false, message: messages.AUTH_FAILURE, detail })\r\n}\r\n\r\napp.get('/auth/sessions', (req, res) => {\r\n  res.json(listSessions())\r\n})\r\n\r\n// RETURN LOGGED IN USER\r\napp.get('/auth/user', (req, res) => {\r\n  let { user } = req.session\r\n  return res.json(user)\r\n})\r\n\r\n// LOGS OUT CURRENT USER\r\napp.use('/auth/logout', (req, res) => {\r\n  let { session } = req\r\n  let { user } = session\r\n  if (!user) {\r\n    return res.status(500).json({ status: 500, message: messages.NOT_LOGGED_IN })\r\n  }\r\n  delete session.user\r\n  res.json({ message: messages.LOGOUT_SUCCESS })\r\n})\r\n\r\n// AUTHENTICATE USER\r\napp.use('/auth', (req, res) => {\r\n  let responseStart = new Date\r\n  let { userid, userpwd, sessionid, token } = req.body\r\n\r\n  // UNSAFE: REMOVE BLOCK IN PRODUCTION: allows GET based login\r\n  if (!userid && !sessionid) {\r\n    userid = req.query.userid\r\n    userpwd = req.query.userpwd\r\n    sessionid = req.query.sessionid\r\n    token = req.query.token\r\n  }\r\n\r\n  let resumedSession = resumeSession(sessionid)\r\n\r\n  if (resumedSession) {\r\n    return res.json(resumedSession)\r\n  }\r\n\r\n  if (!userid || !userpwd) {\r\n    if (token) {\r\n      try {\r\n        token = bf.decrypt(token)\r\n        token = JSON.parse(token)\r\n        userid = token.userid\r\n        userpwd = token.userpwd\r\n        if (new Date(token.expires) < new Date) {\r\n          return res.status(401).json({ status: 401, success: false, error: 'Attempted relogin using expired token' })\r\n        }\r\n      } catch(err) {\r\n        console.log(err.message)\r\n        return res.status(401).json({ status: 401, success: false, error: 'Attempted relogin using invalid token' })\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!userid || !userpwd) {\r\n    return authenticationFailure(res, 'Missing username or password')\r\n  }\r\n\r\n  users.validate({\r\n    username: userid,\r\n    password: userpwd\r\n  }, (err, userData) => {\r\n    if (err) {\r\n      return authenticationFailure(res, err)\r\n    }\r\n\r\n    let user = {\r\n      id: userData.username,\r\n      name: userData.username,\r\n      portfolios: userData.portfolios\r\n    }\r\n\r\n    // embed user in request.session\r\n    req.session.user = createSession(user, { userid, userpwd })\r\n    req.session.save()\r\n\r\n    // send final response\r\n    res.json(user)\r\n  })\r\n})\r\n\r\nexport default app\r\n","// create express app\r\nimport express from 'express'\r\nimport apicache from 'apicache'\r\nimport auth from './auth/index.js'\r\n\r\n// import moment and plugins\r\nimport moment from 'moment'\r\nrequire('moment-precise-range-plugin')\r\n\r\n// import package.json\r\nlet pkg = require('../package.json')\r\n\r\nconst app = express()\r\nconst serverStart = new Date\r\nconst LOG_LIMIT = 5000\r\n\r\nlet log = []\r\nlet logHash = {}\r\nlet requestsServed = 0\r\n\r\nfunction shouldBeLogged(req) {\r\n  if (req.originalUrl.indexOf('/cache') !== -1) return false\r\n  if (req.path.indexOf('/status') !== -1) return false\r\n  if (req.path.indexOf('favicon') !== -1) return false\r\n  return true\r\n}\r\n\r\napp.use('*', (req, res, next) => {\r\n  let start = new Date\r\n  requestsServed++\r\n\r\n  res.__endFromLogger = res.end\r\n\r\n  res.end = (...args) => {\r\n    res.logEntry = {\r\n      url: req.protocol + '://' + req.get('host') + req.originalUrl,\r\n      status: res.statusCode,\r\n      date: new Date,\r\n      time: new Date - start\r\n    }\r\n\r\n    if (res._headers['apicache-store']) {\r\n      res.logEntry.fromCache = true\r\n    }\r\n\r\n    if (shouldBeLogged(req)) {\r\n      // add logEntry to beginning of log\r\n      log.unshift(res.logEntry)\r\n\r\n      // preserve first LOG_LIMIT entries\r\n      log.splice(LOG_LIMIT)\r\n    }\r\n\r\n    res.__endFromLogger(...args)\r\n  }\r\n\r\n  next()\r\n})\r\n\r\napp.get('/status', auth.isAuthenticated, (req, res) => {\r\n  let urlPrefix = req.protocol + '://' + req.get('host')\r\n  let groups = apicache.getIndex().groups\r\n\r\n  res.json({\r\n    description: pkg.description,\r\n    version: pkg.version,\r\n    uptime: {\r\n      numeric: new Date - serverStart,\r\n      string: moment.preciseDiff(moment(serverStart), moment(new Date))\r\n    },\r\n    cacheControl: {\r\n      view: urlPrefix + '/cache/index',\r\n      clear: {\r\n        all: urlPrefix + '/cache/clear',\r\n        groups: Object.keys(groups).reduce((list, groupName) => {\r\n          list[groupName] = urlPrefix + '/cache/clear/' + groupName\r\n\r\n          return list\r\n        }, {})\r\n      }\r\n    },\r\n    requests: {\r\n      served: requestsServed,\r\n      currentlyCached: apicache.getIndex().all.length\r\n    },\r\n    log: log.slice(0, req.query.limit || LOG_LIMIT)\r\n  })\r\n})\r\n\r\n// setup initial API middleware on all /spa/ routes\r\napp.get('/cache/index', auth.isAuthenticated, function(req, res, next) {\r\n  return res.send(apicache.getIndex())\r\n})\r\n\r\napp.get('/cache/clear/:key?', auth.isAuthenticated, function(req, res, next) {\r\n  apicache.clear(req.params.key)\r\n\r\n  return res.send(apicache.getIndex())\r\n})\r\n\r\nexport default app\r\n","import express from 'express'\r\n// import odb from './../../models/odb'\r\n\r\nlet app = express()\r\n\r\nconst env = process.env.NODE_ENV || 'dev'\r\nconst isProduction = env === 'production'\r\n\r\n// First sample route to query db\r\napp.get('/get_all', (req, res) => {\r\n  // odb.findAll(collection, query, (err, doc) => {\r\n  //   if(err) {\r\n  //     console.log('do something here', err)\r\n  //     res.status(500).send()\r\n  //   } else {\r\n  //     res.json(doc)\r\n  //   }\r\n  // })\r\n  res.end()\r\n})\r\n\r\nexport default app","import 'regenerator-runtime/runtime'\r\nimport express from 'express'\r\nimport morgan from 'morgan'\r\nimport path from 'path'\r\nimport session from 'express-session'\r\nimport config from '../app-config'\r\nimport bodyParser from 'body-parser'\r\nimport { autoRefreshSession } from './auth/session-store'\r\nimport logger from './logger'\r\nimport pkg from '../package.json'\r\nimport compression from 'compression'\r\nimport api from './api/api'\r\n\r\n// CONFIG & ENVIRONMENT\r\nconst env = process.env.NODE_ENV || 'dev'\r\nconst isProduction = env === 'production'\r\n\r\nconst PORT = process.env.PORT || 3008\r\n\r\n// INITIALIZE APP SERVER\r\nconsole.log(`initializing ${pkg.description} server in ${env} mode...`)\r\nvar app = express()\r\n\r\n// ENABLE GZIP COMPRESSION\r\n// app.use(compression())\r\n\r\n// ENABLE USER SESSIONS\r\napp.use(session({\r\n  name: 'server-session-cookie-id',\r\n  secret: 'kitty cat of kittens',\r\n  saveUninitialized: true,\r\n  resave: true\r\n}))\r\n\r\n// ENABLED FORM BODY PARSING\r\napp.use(bodyParser.json()) // to support JSON-encoded bodies\r\napp.use(bodyParser.urlencoded({ // to support URL-encoded bodies\r\n  extended: true\r\n}))\r\n\r\n// ENABLE OUTPUT LOGGING\r\napp.use(morgan('dev'))\r\n\r\n// ENABLE SESSION REFRESHING ON REQUEST\r\napp.use(autoRefreshSession)\r\n\r\n// ENABLE STATIC CONTENT DELIVERY\r\napp.use(express.static(path.join(__dirname, (!isProduction ? '../dist-dev/client' : '/client'))))\r\n// app.use(express.static(path.join(__dirname, (!isProduction ? '../dist/images' : '/client'))))\r\n\r\n// ENABLE AUTHENTICATION\r\nimport auth from './auth/index'\r\napp.use(auth)\r\n\r\n// ENABLE LOGGING AND CACHE CONTROL\r\napp.use(logger)\r\n\r\napp.use('/api', api)\r\n  // VERSION & PACKAGE CHECKING\r\napp.get('/version', (req, res) => {\r\n  let { name, version, description } = pkg\r\n  let { title } = config\r\n  res.json({ name, title, description, version, deployed: new Date })\r\n})\r\n\r\n// CREATE HTTP SERVER\r\nvar httpServer = app.listen(PORT, function() {\r\n  console.log(`HTTP server listening on port ${httpServer.address().port}`)\r\n})\r\n"],"names":["message","debug","DEFAULT_EXPIRATION","HASH_SECRET","pkg","version","hmac","crypto","createHmac","bf","Blowfish","Date","prototype","add","ms","setTime","getTime","toUTC","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","sessions","timeoutSession","sessionid","duration","setTimeout","session","user","name","clearSessions","keys","forEach","id","timeout","createSession","token","expires","encrypt","JSON","stringify","update","digest","listSessions","Object","map","autoRefreshSession","req","res","next","refreshSession","storedSession","assign","resumeSession","StringTimer","init","format","unit","key","distance","at","log","slice","stamps","date","logLimit","total","formatter","elapsed","set","credentials","require","APP_ROOT","databases","alias","db","dbConfig","host","database","pool","mysql","createPool","connection","comysql","QueryBuilder","options","_query","postFilters","transforms","setDB","filter","push","transform","condition","where","sql","callback","fromSQL","execute","from","time","query","toSQL","err","results","data","pop","length","table","joinStr","joins","join","groupBy","Array","isArray","s","num","limit","orderBy","select","get","portfolioID","parseInt","getJoins","target","writeFunction","write","process","stdout","bind","tally","value","label","header","bold","white","task","complete","green","incomplete","red","yellow","warn","error","console","consoleFunctions","hash","obj","username","sqlize","SqlString","escape","sqlizeDate","toISOString","replace","create","cb","password","qb","values","appConfig","users","success","getUser","params","canMatch","param","validate","userData","company","email","details","pwd","now","updateSQL","Error","commandCreateUser","prompt","portfolios","commandValidateUser","userCommands","argv","availableCommands","command","app","express","messages","isEnabled","isAuthenticated","status","json","REQUIRES_LOGIN","authenticationFailure","detail","AUTH_FAILURE","use","NOT_LOGGED_IN","LOGOUT_SUCCESS","responseStart","body","userid","userpwd","resumedSession","decrypt","parse","save","serverStart","LOG_LIMIT","requestsServed","shouldBeLogged","originalUrl","indexOf","path","start","__endFromLogger","end","logEntry","protocol","statusCode","_headers","fromCache","unshift","splice","auth","urlPrefix","groups","apicache","getIndex","description","moment","preciseDiff","reduce","list","groupName","all","send","clear","env","isProduction","PORT","bodyParser","urlencoded","morgan","static","__dirname","logger","api","title","config","deployed","httpServer","listen","address","port"],"mappings":"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"}